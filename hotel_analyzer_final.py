# -*- coding: utf-8 -*-
"""hotel_analyzer_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q2Lvbv_19P6xQz0XfHawdlcJNYXaolK8
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re

pip install transformers

import torch
import pandas as pd
import torch.nn.functional as F
from transformers import pipeline
from transformers import AutoTokenizer, AutoModelForSequenceClassification
from transformers import DistilBertTokenizer

"""##Collecting Customer Reviews"""

binori=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Binori_reviews.csv')
courtyard_sbr=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Courtyard_SBR_reviews.csv')
crown_plaza=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Crown_Plaza_reviews.csv')
dt=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/DoubleTree_reviews.csv')
ff_marriott=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/FairField_Marriott_reviews.csv')
fortune_select=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Fortune_Select_reviews.csv')
holiInn_prahald=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/HolidayInn_Prahaladnagar_reviews.csv')
hyatt=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Hyatt_reviews.csv')
itc_narmada=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/ITC_Narmada_reviews.csv')
lt=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Lemon Tree Premier; The Atrium_reviews.csv')
novotel=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Novotel_reviews.csv')
pride_plaza=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/PridePlaza_reviews.csv')
rb=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Radisson_Blu_reviews.csv')
taj=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/TAJ_reviews.csv')
vivanta=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Vivanta_reviews.csv')
courtyard_marriott=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Courtyard_Marriott_reviews.csv')
ramada=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Ramada_reviews_only.csv')
renaissance=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Renaissance_reviews.csv')

cama=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/Cama_reviews.csv')
cambay=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/Cambay_Grand_reviews.csv')
fourtune_park=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/Fortune_Park_reviews.csv')
four_points=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/Four_Points_reviews.csv')
hillock=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/Hillock_reviews.csv')
mg=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/House_of_MG_reviews.csv')
hyatt_regency=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/Hyatt_Regency_reviews.csv')
metropole=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/Metropole_reviews.csv')
president=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/President_reviews.csv')
regenta=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/Regenta_Central_reviews.csv')
ummed=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/The_Ummed_reviews.csv')
welcomes=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/WelcomHotel_ITC_reviews.csv')
wyndham=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/Wyndham_reviews.csv')
fortune_landmark=pd.read_csv('/content/drive/MyDrive/Hotel_Reviews/Left/Fortune_Landmark_reviews.csv')

ramada=ramada['Review']
ramada=pd.DataFrame(ramada)
ramada['Hotel_Name']='Ramada'

courtyard_marriott['Review ']
courtyard_marriott.rename(columns={'Review ':'Review'},inplace=True)
courtyard_marriott=courtyard_marriott['Review']
courtyard_marriott=pd.DataFrame(courtyard_marriott)
courtyard_marriott['Hotel_Name']='Courtyard Marriott'
courtyard_marriott.dropna(inplace=True)

binori=binori['Reviews']

binori=pd.DataFrame(binori)
binori['Hotel_Name']='Binori'
binori.rename(columns={'Reviews':'Review'},inplace=True)
binori.dropna(inplace=True)

courtyard_sbr=courtyard_sbr['Review']

courtyard_sbr=pd.DataFrame(courtyard_sbr)
courtyard_sbr['Hotel_Name']='Courtyard SBR'
#courtyard_sbr.rename(columns={'Reviews':'Review'},inplace=True)

crown_plaza=crown_plaza['Review']

crown_plaza=pd.DataFrame(crown_plaza)
crown_plaza['Hotel_Name']='Crown Plaza'

dt=dt["Review"]
dt=pd.DataFrame(dt)
dt['Hotel_Name']="Double Tree"

ff_marriott=ff_marriott['Review']
ff_marriott=pd.DataFrame(ff_marriott)
ff_marriott['Hotel_Name']='FairField Marriott'

fortune_select=fortune_select['Review']
fortune_select=pd.DataFrame(fortune_select)
fortune_select['Hotel_Name']='Fortune Select'

holiInn_prahald=holiInn_prahald['Review']
holiInn_prahald=pd.DataFrame(holiInn_prahald)
holiInn_prahald['Hotel_Name']='Holiday Inn Prahaladnagar'
holiInn_prahald.dropna(inplace=True)

hyatt=hyatt['Review']
hyatt=pd.DataFrame(hyatt)
hyatt['Hotel_Name']='Hyatt'

itc_narmada=itc_narmada['Review']
itc_narmada=pd.DataFrame(itc_narmada)
itc_narmada['Hotel_Name']='ITC Narmada'

lt=lt['Review']
lt=pd.DataFrame(lt)
lt['Hotel_Name']='Lemon Tree Premier, The Atrium'
lt.dropna(inplace=True)

novotel=novotel['Review']
novotel=pd.DataFrame(novotel)
novotel['Hotel_Name']='Novotel'
novotel.dropna(inplace=True)

pride_plaza=pride_plaza['Review']
pride_plaza=pd.DataFrame(pride_plaza)
pride_plaza['Hotel_Name']='Pride Plaza'
pride_plaza.dropna(inplace=True)

rb=rb['Review']
rb=pd.DataFrame(rb)
rb['Hotel_Name']='Radisson Blu'

taj=taj['Reviews']
taj=pd.DataFrame(taj)
taj.rename(columns={'Reviews':'Review'},inplace=True)
taj['Hotel_Name']='Taj'

vivanta=vivanta.rename(columns={'Review ':'Review'})
vivanta=vivanta['Review']
vivanta=pd.DataFrame(vivanta)
vivanta['Hotel_Name']='Vivanta'
vivanta.dropna(inplace=True)

renaissance=renaissance.rename(columns={'Reviews':'Review'})
renaissance=renaissance['Review']
renaissance=pd.DataFrame(renaissance)
renaissance['Hotel_Name']='Renaissance'
renaissance.dropna(inplace=True)

hotel_df=pd.concat([binori,courtyard_sbr,crown_plaza,dt,ff_marriott,fortune_select,holiInn_prahald,hyatt,itc_narmada,lt,novotel,pride_plaza,rb,taj,vivanta,courtyard_marriott,ramada,renaissance])

hotel_df.isna().sum()

cama=cama['Review']
cama=pd.DataFrame(cama)
cama['Hotel_Name']='Cama'
cama.dropna(inplace=True)

cambay=cambay['Review']
cambay=pd.DataFrame(cambay)
cambay['Hotel_Name']='Cambay Grand'
cambay.dropna(inplace=True)

fourtune_park=fourtune_park['Review']
fourtune_park=pd.DataFrame(fourtune_park)
fourtune_park['Hotel_Name']='Fortune Park'
fourtune_park.dropna(inplace=True)

four_points=four_points['Review']
four_points=pd.DataFrame(four_points)
four_points['Hotel_Name']='Four Points'
four_points.dropna(inplace=True)

hillock=hillock['Review']
hillock=pd.DataFrame(hillock)
hillock['Hotel_Name']='Hillock'
hillock.dropna(inplace=True)

mg=mg['Review']
mg=pd.DataFrame(mg)
mg['Hotel_Name']='House of MG'
mg.dropna(inplace=True)

metropole=metropole['Review']
metropole=pd.DataFrame(metropole)
metropole['Hotel_Name']='Metropole'
metropole.dropna(inplace=True)

hyatt_regency=hyatt_regency['Review']
hyatt_regency=pd.DataFrame(hyatt_regency)
hyatt_regency['Hotel_Name']='Hyatt Regency'
hyatt_regency.dropna(inplace=True)

president=president['Review']
president=pd.DataFrame(president)
president['Hotel_Name']='The President'
president.dropna(inplace=True)

regenta=regenta['Review']
regenta=pd.DataFrame(regenta)
regenta['Hotel_Name']='Regenta Central'
regenta.dropna(inplace=True)

ummed=ummed['Review']
ummed=pd.DataFrame(ummed)
ummed['Hotel_Name']='The Ummed'
ummed.dropna(inplace=True)

welcomes=welcomes['Review']
welcomes=pd.DataFrame(welcomes)
welcomes['Hotel_Name']='WelcomHotel ITC'
welcomes.dropna(inplace=True)

wyndham=wyndham['Review']
wyndham=pd.DataFrame(wyndham)
wyndham['Hotel_Name']='Wyndham'
wyndham.dropna(inplace=True)

fortune_landmark=fortune_landmark['Review']
fortune_landmark=pd.DataFrame(fortune_landmark)
fortune_landmark['Hotel_Name']='Fortune Landmark'
fortune_landmark.dropna(inplace=True)

hotel_df2=pd.concat([cama,cambay,fourtune_park,four_points,hillock,mg,hyatt_regency,metropole,president,regenta,ummed,welcomes,wyndham,fortune_landmark])

final_hotel_df=pd.concat([hotel_df,hotel_df2])

hotel_df2.reset_index(drop=True,inplace=True)

"""##Custom Functions"""

def truncate_reviews(df, review_column, max_length=512):
    """
    Truncate reviews in the dataframe that exceed the maximum token length of 512 tokens.

    Args:
        df (pd.DataFrame): The DataFrame containing the reviews.
        review_column (str): The name of the column containing reviews.
        max_length (int): The maximum number of tokens allowed (default: 512).

    Returns:
        pd.DataFrame: DataFrame with truncated reviews where applicable.
    """
    # Initialize the DistilBERT tokenizer
    tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')

    # Function to tokenize and truncate review if its token length exceeds max_length
    def truncate_review(review):
        # Tokenize the review and check its token length
        tokens = tokenizer.tokenize(review)
        if len(tokens) > max_length:
            # Truncate the tokens to max_length
            truncated_tokens = tokens[:max_length]
            # Convert tokens back to string
            truncated_review = tokenizer.convert_tokens_to_string(truncated_tokens)
            return truncated_review
        else:
            # Return the review as is if it does not exceed max_length
            return review

    # Apply the truncate function to the review column
    df[review_column] = df[review_column].apply(truncate_review)

    return df

def clean_review(review):
    # List of words to replace
    clean_list = ['clean', 'cleaned', 'cleaner', 'cleaners', 'cleaniness', 'cleaning', 'cleanliness',
       'cleanly', 'cleanness', 'cleans', 'cleant', 'cleanup', 'reclean', 'roomcleanliness',
       'unclean', 'uncleaned', 'veryclean']
    room_list=['rooms','room5','inroom','roomall','roombut', 'roomcolour', 'roomi', 'roomroom', 'roomthe','roomy','yroom']
    # comfortable_list=['comfort','comfortable', 'comfortableall', 'comfortablegood', 'comfortableneat', 'comfortableroom', 'comfortablestaff', 'comfortablethank', 'comfortablethe', 'comfortably', 'comfortbale', 'comforter', 'comforting', 'comforts']

# Sample review text (replace this with your actual text data)

# Loop through the list and replace variations with the base word "clean"
    for word in clean_list:
      review = review.replace(word, "clean")

    for i in room_list:
      review=review.replace(i,'room')


    review = review.lower()  # Convert to lowercase
    review = review.replace("rooms", "room")  # Replace "rooms" with "room"
    review = review.replace("services", "service")  # Replace "services" with "service"
    review = review.replace("experiences", "experience")
    review = review.replace("food.", "food")
    review = review.replace("foods", "food")
    review = review.replace("service.", "service")
    review = review.replace("stay.", "stay")
    review = review.replace("staff.", "staff")
    review = review.replace("room.", "room")
    review = review.replace("location.", "location")
    review = review.replace("experience.", "experience")
    review = review.replace("room,", "room")
    review = review.replace("service,", "serivce")
    review = review.replace("staff,", "staff")
    review = review.replace("food,", "food")
    review = review.replace("serivce", "service")
    review = review.replace("located", "location")
    review = review.replace("locations", "location")
    review = review.replace("staying", "stay")
    review=review.replace("clean,","clean")
    review=review.replace("clean.","clean")
    review=review.replace("stay,","stay")
    review=review.replace("breakfast.","breakfast")
    review=review.replace("breakfast,","breakfast")
    review=review.replace("staffs,","staff")

    review=review.replace("comfortable,","comfortable")
    review=review.replace("comfortable.","comfortable")





     # Replace "experiences" with "experience"
    return review

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer

def create_vocabulary(dataframe, column_name):
    # Combine all reviews into a single text
    all_reviews = " ".join(dataframe[column_name].astype(str))

    # Use CountVectorizer to tokenize and extract unique words
    vectorizer = CountVectorizer()
    vectorizer.fit([all_reviews])

    # Get the vocabulary
    vocabulary = sorted(vectorizer.get_feature_names_out())
    return vocabulary

# Load pre-trained model and tokenizer
absa_tokenizer = AutoTokenizer.from_pretrained("yangheng/deberta-v3-base-absa-v1.1")
absa_model = AutoModelForSequenceClassification.from_pretrained("yangheng/deberta-v3-base-absa-v1.1")

# Set the device to GPU if available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
absa_model.to(device)

def analyze_aspects(review, aspect_groups):
    """
    Analyzes sentiment for each aspect group in a review.

    Args:
        review (str): The review text.
        aspect_groups (dict): A dictionary of aspect groups with their associated keywords.

    Returns:
        dict: A dictionary containing sentiment scores (positive/negative) for each aspect group.
        dict: A dictionary containing aspect classification: 1 (positive), -1 (negative), 0 (not present).
    """
    results = {}
    aspect_classification = {}

    for aspect, keywords in aspect_groups.items():
        # Check if any keyword for the aspect is mentioned in the review
        if any(keyword.lower() in review.lower() for keyword in keywords):
            # Format the input for ABSA using the first matching keyword
            matching_keyword = next(keyword for keyword in keywords if keyword.lower() in review.lower())
            formatted_input = f"[CLS] {review} [SEP] {matching_keyword} [SEP]"
            inputs = absa_tokenizer(formatted_input, return_tensors="pt").to(device)

            # Get model predictions
            with torch.no_grad():
                outputs = absa_model(**inputs)

            # Apply softmax to calculate probabilities for sentiment classes
            probs = F.softmax(outputs.logits, dim=1).cpu().numpy()[0]

            # Store sentiment scores
            #results[f"{aspect}_negative"] = probs[0]
            results[f"{aspect}_positive"] = probs[2]  # Assuming class 2 is "positive"

            # Determine aspect classification based on the condition
            if probs[2] > 0.6:  # Positive probability > 0.6
                aspect_classification[aspect] = 1
            else:  # Otherwise, classify as negative
                aspect_classification[aspect] = -1
        else:
            # Aspect not present in the review
            aspect_classification[aspect] = 0

    return results, aspect_classification

aspect_groups = {
    "food": ["food", "breakfast", "buffet", "dinner", "dining", "dishes", "cuisine", "lunch"],
    "clean": ["clean", "cleanliness", "hygiene"],
    "staff": ["staff", "attendant", "employees", "chef", "servers", "waiter", "manager", "team",
              "receptionist", "management", "housekeeping", "house-keeping"],
    "room": ["room", "spacious", "bed", "bedroom", "beds", "rooms"],
    "location": ["location", "located", "place", "view", "distance", "accessibility"],
    "service": ["luxury", "comfort", "comfortable", "service", "hospitality", "hospitable"]
}

def process_review(cleaned_review):
    # Analyze aspects for the cleaned review
    _, aspect_classification = analyze_aspects(cleaned_review, aspect_groups)

    # Return a dictionary of aspect classifications
    return {aspect: aspect_classification.get(aspect, 0) for aspect in aspect_groups.keys()}

def analyze_aspects_get_per(df):
    # Initialize lists to store the data
    aspect_names = []
    positive_count_list = []
    negative_count_list = []
    difference_list = []
    positive_percentage_list = []

    # Loop through the aspect columns
    aspects = ['food', 'clean', 'staff', 'room', 'location', 'service']
    for aspect in aspects:
        predicted_column = f'{aspect}'

        # Count occurrences of 1 (positive) and -1 (negative)
        positive_count = (df[predicted_column] == 1).sum()  # Count of positive reviews
        negative_count = (df[predicted_column] == -1).sum()  # Count of negative reviews

        # Calculate the difference
        #difference = positive_count - negative_count
        total_reviews = positive_count + negative_count

        # Calculate the percentage of positive reviews
        positive_percentage = (positive_count / total_reviews) * 100 if total_reviews > 0 else 0

        # Store the data
        aspect_names.append(aspect)
        positive_count_list.append(positive_count)
        negative_count_list.append(negative_count)
      #  difference_list.append(difference)
        positive_percentage_list.append(positive_percentage)

    # Create a DataFrame to display the results
    result_df = pd.DataFrame({
        'Aspect': aspect_names,
        'Positive Reviews': positive_count_list,
        'Negative Reviews': negative_count_list,
        # 'Difference': difference_list,
        'Percentage': positive_percentage_list
    })

    return result_df

def compare_aspects(hotel_df, average_df):
    """
    Compare the percentage of aspects from a hotel DataFrame with the average percentages.

    Args:
        hotel_df (pd.DataFrame): DataFrame containing 'Aspect' and 'Percentage' columns for a specific hotel.
        average_df (pd.DataFrame): DataFrame containing 'Aspect' and 'Average Percentage' columns.

    Returns:
        tuple: Two lists - positive_aspects and negative_aspects.
    """
    # Merge the hotel DataFrame with the average percentage DataFrame
    comparison_df = pd.merge(hotel_df, average_df, on="Aspect")

    # Determine positive and negative aspects based on comparison
    positive_aspects = comparison_df[comparison_df["Percentage"] > comparison_df["Average Percentage"]]["Aspect"].tolist()
    negative_aspects = comparison_df[comparison_df["Percentage"] <= comparison_df["Average Percentage"]]["Aspect"].tolist()

    return positive_aspects, negative_aspects

"""##Data Preprocessing"""

list2=[cama,cambay,fourtune_park,four_points,hillock,mg,hyatt_regency,metropole,president,regenta,ummed,welcomes,wyndham,fortune_landmark]
for i in list2:
  i=truncate_reviews(i,'Review')

# final_hotel_df["CleanedReview"] = final_hotel_df["Review"].apply(clean_review)
for i in list2:
  i['CleanedReview']=i['Review'].apply(clean_review)

hotel_df2['CleanedReview']=hotel_df2['Review'].apply(clean_review)

hotel_vocabulary = create_vocabulary(final_hotel_df, 'CleanedReview')

# Print the size of the vocabulary and first few unique words
print(f"Vocabulary Size: {len(hotel_vocabulary)}")

final_hotel_df.reset_index(drop=True,inplace=True)

final_hotel_df['Hotel_Name'].value_counts()

list1=[binori,courtyard_sbr,crown_plaza,dt,ff_marriott,fortune_select,holiInn_prahald,hyatt,itc_narmada,lt,novotel,pride_plaza,rb,taj,vivanta,courtyard_marriott,ramada,renaissance]
for i in list1:
  i=truncate_reviews(i,'Review')

for i in list1:
  i['CleanedReview']=i['Review'].apply(clean_review)

hotel_df['CleanedReview']=hotel_df['Review'].apply(clean_review)

"""##Binori"""

aspect_results = binori["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
binori = pd.concat([binori, aspect_df], axis=1)

binori

binori_cleaned = binori.dropna()

# Reset index after dropping rows with NaN values
binori_cleaned = binori_cleaned.reset_index(drop=True)
binori_cleaned

binori_result = analyze_aspects_get_per(binori_cleaned)
binori_result

positive_aspects, negative_aspects = compare_aspects(binori_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Courtyard SBR"""

import pandas as pd
from tqdm import tqdm
tqdm.pandas()
aspect_results = courtyard_sbr["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
courtyard_sbr = pd.concat([courtyard_sbr, aspect_df], axis=1)

courtyard_sbr_result = analyze_aspects_get_per(courtyard_sbr)
courtyard_sbr_result

positive_aspects, negative_aspects = compare_aspects(courtyard_sbr_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Crown Plaza"""

aspect_results = crown_plaza["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
crown_plaza = pd.concat([crown_plaza, aspect_df], axis=1)

crown_plaza_result = analyze_aspects_get_per(crown_plaza)
crown_plaza_result

positive_aspects, negative_aspects = compare_aspects(crown_plaza_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Double Tree"""

aspect_results = dt["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
dt = pd.concat([dt, aspect_df], axis=1)

dt_result = analyze_aspects_get_per(dt)
dt_result

positive_aspects, negative_aspects = compare_aspects(dt_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Fairfield Marriott"""

aspect_results = ff_marriott["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
ff_marriott = pd.concat([ff_marriott, aspect_df], axis=1)

ff_marriott_result = analyze_aspects_get_per(ff_marriott)
ff_marriott_result

positive_aspects, negative_aspects = compare_aspects(ff_marriott_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Fortune Select"""

aspect_results = fortune_select["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
fortune_select = pd.concat([fortune_select, aspect_df], axis=1)

fortune_select_result = analyze_aspects_get_per(fortune_select)
fortune_select_result

positive_aspects, negative_aspects = compare_aspects(fortune_select_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##HolidayInn"""

aspect_results = holiInn_prahald["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
holiInn_prahald = pd.concat([holiInn_prahald, aspect_df], axis=1)

holiInn_prahald_result = analyze_aspects_get_per(holiInn_prahald)
holiInn_prahald_result

positive_aspects, negative_aspects = compare_aspects(holiInn_prahald_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Hyatt"""

aspect_results = hyatt["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
hyatt = pd.concat([hyatt, aspect_df], axis=1)

hyatt_result = analyze_aspects_get_per(hyatt)
hyatt_result

positive_aspects, negative_aspects = compare_aspects(hyatt_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Radisson Blu"""

aspect_results = rb["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
rb = pd.concat([rb, aspect_df], axis=1)

rb_result = analyze_aspects_get_per(rb)
rb_result

positive_aspects, negative_aspects = compare_aspects(rb_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Pride Plaza"""

aspect_results = pride_plaza["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
pride_plaza = pd.concat([pride_plaza, aspect_df], axis=1)

pride_plaza_result = analyze_aspects_get_per(pride_plaza)
pride_plaza_result

positive_aspects, negative_aspects = compare_aspects(pride_plaza_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Novotel"""

aspect_results = novotel["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
novotel = pd.concat([novotel, aspect_df], axis=1)

novotel_result = analyze_aspects_get_per(novotel)
novotel_result

positive_aspects, negative_aspects = compare_aspects(novotel_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Lemon tree"""

aspect_results = lt["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
lt = pd.concat([lt, aspect_df], axis=1)

lt_result = analyze_aspects_get_per(lt)
lt_result

positive_aspects, negative_aspects = compare_aspects(lt_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##ITC Narmada"""

aspect_results = itc_narmada["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
itc_narmada = pd.concat([itc_narmada, aspect_df], axis=1)

itc_narmada_result = analyze_aspects_get_per(itc_narmada)
itc_narmada_result

positive_aspects, negative_aspects = compare_aspects(itc_narmada_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Taj"""

aspect_results = taj["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
taj = pd.concat([taj, aspect_df], axis=1)

taj_result = analyze_aspects_get_per(taj)
taj_result

positive_aspects, negative_aspects = compare_aspects(taj_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Vivanta"""

aspect_results = vivanta["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
vivanta = pd.concat([vivanta, aspect_df], axis=1)

vivanta_result = analyze_aspects_get_per(vivanta)
vivanta_result

positive_aspects, negative_aspects = compare_aspects(vivanta_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Courtyard Marriott"""

aspect_results = courtyard_marriott["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
courtyard_marriott = pd.concat([courtyard_marriott, aspect_df], axis=1)

courtyard_marriott_result = analyze_aspects_get_per(courtyard_marriott)
courtyard_marriott_result

positive_aspects, negative_aspects = compare_aspects(courtyard_marriott_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Ramada"""

aspect_results = ramada["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
ramada = pd.concat([ramada, aspect_df], axis=1)

ramada_result = analyze_aspects_get_per(ramada)
ramada_result

positive_aspects, negative_aspects = compare_aspects(ramada_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Renaisance"""

aspect_results = renaissance["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
renaissance = pd.concat([renaissance, aspect_df], axis=1)

renaissance_result = analyze_aspects_get_per(renaissance)
renaissance_result

positive_aspects, negative_aspects = compare_aspects(renaissance_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Cama"""

aspect_results = cama["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
cama = pd.concat([cama, aspect_df], axis=1)

cama_result = analyze_aspects_get_per(cama)
cama_result

positive_aspects, negative_aspects = compare_aspects(cama_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Cambay"""

aspect_results = cambay["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
cambay = pd.concat([cambay, aspect_df], axis=1)

cambay_result = analyze_aspects_get_per(cambay)
cambay_result

positive_aspects, negative_aspects = compare_aspects(cambay_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Fortune Park"""

fourtune_park

aspect_results = fourtune_park["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
fourtune_park = pd.concat([fourtune_park, aspect_df], axis=1)

fourtune_park_result = analyze_aspects_get_per(fourtune_park)
fourtune_park_result

positive_aspects, negative_aspects = compare_aspects(fourtune_park_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Four Seasons"""

aspect_results = four_points["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
four_points = pd.concat([four_points, aspect_df], axis=1)

four_points_result = analyze_aspects_get_per(four_points)
four_points_result

positive_aspects, negative_aspects = compare_aspects(four_points_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Hillock"""

aspect_results = hillock["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
hillock = pd.concat([hillock, aspect_df], axis=1)

positive_aspects, negative_aspects = compare_aspects(taj_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

hillock_result = analyze_aspects_get_per(hillock)
hillock_result

positive_aspects, negative_aspects = compare_aspects(hillock_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##House of MG"""

aspect_results = mg["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
mg = pd.concat([mg, aspect_df], axis=1)

mg_result = analyze_aspects_get_per(mg)
mg_result

positive_aspects, negative_aspects = compare_aspects(mg_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Hyatt Regency"""

aspect_results = hyatt_regency["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
hyatt_regency = pd.concat([hyatt_regency, aspect_df], axis=1)

hyatt_regency_result = analyze_aspects_get_per(hyatt_regency)
hyatt_regency_result

positive_aspects, negative_aspects = compare_aspects(hyatt_regency_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Metropole"""

aspect_results = metropole["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
metropole = pd.concat([metropole, aspect_df], axis=1)

metropole_result = analyze_aspects_get_per(metropole)
metropole_result

positive_aspects, negative_aspects = compare_aspects(metropole_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##President"""

aspect_results = president["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
president = pd.concat([president, aspect_df], axis=1)

president_result = analyze_aspects_get_per(president)
president_result

positive_aspects, negative_aspects = compare_aspects(president_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Regenta Central"""

aspect_results = regenta["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
regenta = pd.concat([regenta, aspect_df], axis=1)

regenta_result = analyze_aspects_get_per(regenta)
regenta_result

positive_aspects, negative_aspects = compare_aspects(regenta_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Ummed"""

aspect_results = ummed["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
ummed = pd.concat([ummed, aspect_df], axis=1)

ummed_result = analyze_aspects_get_per(ummed)
ummed_result

positive_aspects, negative_aspects = compare_aspects(ummed_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Welcomes by ITC"""

aspect_results = welcomes["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
welcomes = pd.concat([welcomes, aspect_df], axis=1)

welcomes_result = analyze_aspects_get_per(welcomes)
welcomes_result

positive_aspects, negative_aspects = compare_aspects(welcomes_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##wyndham"""

aspect_results = wyndham["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
wyndham = pd.concat([wyndham, aspect_df], axis=1)

wyndham_result = analyze_aspects_get_per(wyndham)
wyndham_result

positive_aspects, negative_aspects = compare_aspects(wyndham_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)

"""##Fortune Landmark"""

aspect_results = fortune_landmark["CleanedReview"].progress_apply(process_review)

# Convert the results (list of dictionaries) into a DataFrame
aspect_df = pd.DataFrame(list(aspect_results))

# Concatenate the aspect DataFrame with the original DataFrame
fortune_landmark = pd.concat([fortune_landmark, aspect_df], axis=1)

fortune_landmark_result = analyze_aspects_get_per(fortune_landmark)
fortune_landmark_result

positive_aspects, negative_aspects = compare_aspects(fortune_landmark_result, average_percentage_df)

print("Positive Aspects:", positive_aspects)
print("Negative Aspects:", negative_aspects)



list2=[cama,cambay,fourtune_park,four_points,hillock,mg,hyatt_regency,metropole,president,regenta,ummed,welcomes,wyndham,fortune_landmark]

"""##Merged Result"""

ans=[binori_result,courtyard_sbr_result,crown_plaza_result,dt_result,ff_marriott_result,fortune_select_result,holiInn_prahald_result,hyatt_result,rb_result,pride_plaza_result,novotel_result,lt_result,itc_narmada_result,taj_result,vivanta_result,courtyard_marriott_result,ramada_result,renaissance_result,cama_result,cambay_result,fourtune_park_result,four_points_result,hillock_result,mg_result,hyatt_regency_result,metropole_result,president_result,regenta_result,ummed_result,welcomes_result,wyndham_result,fortune_landmark_result]
ans

combined_df = pd.concat(ans)

# Group by 'Aspect' and calculate the mean of 'Percentage'
average_percentage = combined_df.groupby("Aspect")["Percentage"].mean()

# Convert to a DataFrame for better readability
average_percentage_df = average_percentage.reset_index()
average_percentage_df.rename(columns={"Percentage": "Average Percentage"}, inplace=True)

# Display the results
print(average_percentage_df)

import pandas as pd

# Hotel data
data = {
    'Hotel Name': [
        'Binori',
        'Fortune Landmark',
        'Wyndham',
        'WelcomHotel ITC',
        'The Ummed'
    ],
    'Positive Aspects': [
        'room, location',
        'food, clean, staff, room, location, service',
        '',
        'food, clean, staff, room, location, service',
        ''
    ],
    'Negative Aspects': [
        'food, clean, staff, service',
        '',
        'food, clean, staff, room, location, service',
        '',
        'food, clean, staff, room, location, service'
    ]
}

# Create the DataFrame
result_df1 = pd.DataFrame(data)

result_df1

# Existing data
data = {
    'Hotel Name': [
        'Binori',
        'Fortune Landmark',
        'Wyndham',
        'WelcomHotel ITC',
        'The Ummed'
    ],
    'Positive Aspects': [
        'room, location',
        'food, clean, staff, room, location, service',
        '',
        'food, clean, staff, room, location, service',
        ''
    ],
    'Negative Aspects': [
        'food, clean, staff, service',
        '',
        'food, clean, staff, room, location, service',
        '',
        'food, clean, staff, room, location, service'
    ]
}

# Adding new hotels
new_data = {
    'Hotel Name': [
        'Regenta Central', 'President', 'Metropole', 'Hyatt Regency',
        'House of MG', 'Hillock', 'Four Seasons', 'Fortune Park',
        'Cambay', 'Cama', 'Renaissance', 'Ramada', 'Courtyard Marriott',
        'Vivanta', 'Taj', 'ITC Narmada', 'Lemon Tree', 'Novotel',
        'Pride Plaza', 'Radisson Blu', 'Hyatt', 'Holiday Inn Prahaladnagar',
        'Fortune Select', 'Fairfield Marriott', 'DoubleTree by Hilton',
        'Crown Plaza', 'Courtyard SBR'
    ],
    'Positive Aspects': [
        '', 'room, location', 'location', 'food, clean, staff, room, service',
        'clean, staff, room, location', 'food, clean, staff, room, location, service',
        'food, staff, location, service', 'food, staff, service',
        '', 'clean, staff, room, location', '',
        'food, clean, staff, location, service', 'staff, room, location, service',
        'food, clean, staff, room, location, service', 'food, staff, room, location, service',
        'food, clean, staff, room, service', 'clean, staff, service',
        'food, clean, staff, room, location, service', 'food, staff, room, location, service',
        'food, clean, staff, room, location, service', 'food, clean, staff, location, service',
        'food, clean, staff, location, service', 'food, location, service',
        '', 'food, clean, staff, room, location', 'clean, staff, room, service',
        'clean, location'
    ],
    'Negative Aspects': [
        'food, clean, staff, room, location, service', 'food, clean, staff, service',
        'food, clean, staff, room, service', 'location',
        'food, service', '', 'clean, room',
        'clean, room, location', 'food, clean, staff, room, location, service',
        'food, service', 'food, clean, staff, room, location, service',
        'room', 'food, clean', '',
        'clean', 'location', 'food, room, location',
        '', 'clean', '', 'room', 'room',
        'clean, staff, room', 'food, clean, staff, room, location, service',
        'service', 'food, location', 'food, staff, room, service'
    ]
}

# Combine existing data with new data
data['Hotel Name'].extend(new_data['Hotel Name'])
data['Positive Aspects'].extend(new_data['Positive Aspects'])
data['Negative Aspects'].extend(new_data['Negative Aspects'])

# Create the updated DataFrame
updated_df1 = pd.DataFrame(data)

updated_df1

